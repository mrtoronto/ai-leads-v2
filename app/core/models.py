from typing import List, Optional
from pydantic import BaseModel, Field
from langchain.output_parsers import PydanticOutputParser

class PotentialSource(BaseModel):
    name: str = Field("", description="The name of the business")
    url: str = Field("", description="A relevant URL")
    description: str = Field("", description="A description of the business")

class PotentialLead(BaseModel):
    url: str = Field("", description="A relevant URL; contact info or home page")
    name: str = Field("", description="The name of the business")
    description: str = Field("", description="A description of the business")

class Lead(BaseModel):
    url: str = Field("", description="A relevant URL; contact info or home page")
    phone: str = Field("", description="A phone number")
    email: str = Field("", description="An email address")

class LeadSource(BaseModel):
    name: str = Field("", description="The name of the business")
    url: str = Field("", description="A relevant URL")
    description: str = Field("", description="A description of the business")
    leads_found: List[Lead] = Field(
        [],
        description="A list of leads found for this source"
    )
    sources_found: List[PotentialSource] = Field(
        [],
        description="A list of sources of leads found in this source"
    )

class LeadSourceListValidation(BaseModel):
    """Used to parse a list of lead sources"""
    RelevantSources: List[PotentialSource] = Field(
        [],
        description="Filtered list of relevant lead sources that are relevant to the user's business."
    )

class LeadSourceValidation(BaseModel):
    """Used to parse a list of lead sources"""
    AdditionalLeadSourcesFound: List[LeadSource] = Field(
        [],
        description="Filtered list of additional lead sources that are relevant to the user's business."
    )
    LeadsFound: List[Lead] = Field(
        [],
        description="Filtered list of leads found in this source"
    )

class SearchQueryList(BaseModel):
    """Used to parse a list of search queries generated by AI"""
    SearchQueries: List[str] = Field(
        [],
        description="A list of new search queries for the user to run"
    )


# Pydantic models for LLM outputs
class WebsiteAnalysis(BaseModel):
    """Analysis of a website's content for email customization"""
    summary: str = Field("", description="Brief summary of what the business does")
    business_type: str = Field("", description="Type of business (e.g. coworking, event space, community center)")
    key_features: List[str] = Field([], description="Key features or services mentioned")
    community_aspects: List[str] = Field([], description="Aspects related to community or events")
    contact_person: Optional[str] = Field(None, description="Name of contact person if found")
    business_name: str = Field("", description="Name of the business")
    useful_quotes: List[str] = Field([], description="Useful quotes from the website that can be used in the email. These should be direct quotes from the website, not paraphrased.")

class TemplateSelection(BaseModel):
    """Selection of the best email template for this business"""
    template_key: str = Field("", description="Key of the selected template from the template dictionary")
    reason: str = Field("", description="Reason why this template was selected")
    customization_needed: bool = Field(True, description="Whether the template needs customization")

class TemplateCustomization(BaseModel):
    """Customization suggestions for the selected template"""
    safe_name: str = Field("", description="Safe name of the business to use in the url parameter for source tracking. URL safe, no special characters, no spaces, no special characters. Describes the business in a way that is easy to use in a URL.")
    subject_line: str = Field("", description="Customized subject line")
    custom_intro: str = Field("", description="Customized introduction paragraph for the outreach email without a greeting. Casual, friendly, and personalized for the business we're reaching out to. Conversational. Refer to the business in the way its described in the analysis. Assume the greeting has already been handled and should not be included here.")
    custom_main_pitch: str = Field("", description="Customized main pitch paragraph for the outreach email. Uses conversational language and base it off the example provided but customize it for the business we're reaching out to.")
    key_points: List[str] = Field([], description="Key points to emphasize based on the business. Uses conversational language. First point talks about types of rooms on Zakaya, second point about the event calendar, third point about buddy matching and fourth point about how the organizations staff can engage with the community.")
    custom_closing: str = Field("", description="Customized closing paragraph. Uses conversational language.")
    specific_references: List[str] = Field([], description="Specific business details to reference. Uses conversational language.")


website_analysis_adapter = PydanticOutputParser(pydantic_object=WebsiteAnalysis)
template_selection_adapter = PydanticOutputParser(pydantic_object=TemplateSelection)
template_customization_adapter = PydanticOutputParser(pydantic_object=TemplateCustomization)



parser_lead_source_list = PydanticOutputParser(pydantic_object=LeadSourceListValidation)
parser_lead_source = PydanticOutputParser(pydantic_object=LeadSourceValidation)

parser_search_query_list = PydanticOutputParser(pydantic_object=SearchQueryList)

class LeadCheckResult(BaseModel):
    """Used to parse lead checking results"""
    phone: str = Field("", description="The best phone number found on the page, or empty string if none found")
    email: str = Field("", description="The best email address found on the page, or empty string if none found")
    notes: str = Field("", description="2-3 specific, actionable bullet points for selling a digital community platform to this business")